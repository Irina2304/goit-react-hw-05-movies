{"version":3,"file":"static/js/387.5f900910.chunk.js","mappings":"+SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAM,mCAECC,EAAQ,mCAAG,oGACCF,EAAAA,EAAAA,IAAA,kDACsBC,IAFvB,cAChBE,EADgB,yBAIfA,EAASC,MAJM,2CAAH,qDAORC,EAAS,mCAAG,WAAMC,GAAN,uFACAN,EAAAA,EAAAA,IAAA,+BACGC,EADH,kBACgBK,IAFhB,cACjBH,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,sDAOTG,EAAO,mCAAG,WAAMC,GAAN,uFACER,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,oBAAiCP,IADnC,cACfE,EADe,yBAEdA,EAASC,MAFK,2CAAH,sDAKPK,EAAY,mCAAG,WAAMD,GAAN,uFACHR,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,4BAAyCP,IADtC,cACpBE,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKZM,EAAY,mCAAG,WAAMF,GAAN,uFACHR,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,4BAAyCP,IADtC,cACpBE,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,qD,+GC3BZO,EAAOC,EAAAA,GAAAA,GAAH,kJASJC,EAAOD,EAAAA,GAAAA,GAAH,sN,6CCJF,SAASE,IACtB,OAA0BC,EAAAA,EAAAA,WAAS,GAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,IAAjC,eAAOK,EAAP,KAAaC,EAAb,KAEMC,GAASC,EAAAA,EAAAA,MAmBf,OAjBAC,EAAAA,EAAAA,YAAU,WACHF,EAAOG,UAIZhB,EAAAA,EAAAA,IAAaa,EAAOG,SACjBC,MAAK,SAAAtB,GACJiB,EAAQjB,EAAKgB,KACd,IACAO,OAAM,WACLV,GAAS,EACV,IACAW,SAAQ,WACPT,GAAW,EACZ,GACJ,GAAE,CAACG,EAAOG,WAGT,iCACE,wBAAI,UACHP,IAAW,SAACW,EAAA,EAAD,IACXb,IACC,SAACc,EAAA,EAAD,CAAcC,MAAM,4CAEL,IAAhBX,EAAKY,QACJ,SAACrB,EAAD,UACGS,EAAKa,KAAI,gBAAGzB,EAAH,EAAGA,GAAI0B,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACR,UAACvB,EAAD,YACE,uBAAIqB,KACJ,yBAAG,cAAYC,MACf,gBACEE,IACED,EAAY,yCAC0BA,GAClC,6CAENE,IAAKJ,EACLK,MAAM,MACNC,OAAO,UAXAhC,EADH,OAkBZ,uBAAG,sDAIV,C,mEC9Dc,SAASsB,EAAT,GAAkC,IAAVC,EAAS,EAATA,MACrC,OAAO,uBAAIA,GACZ,C,4ECAYF,EAAS,WACpB,OACE,SAAC,KAAD,CACEY,SAAS,EACTD,OAAO,KACPD,MAAM,KACNG,UAAU,gBACVC,aAAc,CAAC,EACfC,aAAa,iBAGlB,C","sources":["api/api.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/ErrorMessage/ErrorMessage.jsx","components/Loader/Loader.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst key = '024cc5f09908565df80effcaf2ef8e5e';\n\nexport const fetchAll = async () => {\n  const response = await axios.get(\n    `trending/all/day?language=en-US&api_key=${key}`\n  );\n  return response.data;\n};\n\nexport const fetchWord = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${key}&query=${query}`\n  );\n  return response.data;\n};\n\nexport const fetchId = async id => {\n  const response = await axios.get(`movie/${id}?api_key=${key}`);\n  return response.data;\n};\n\nexport const fetchCredits = async id => {\n  const response = await axios.get(`movie/${id}/credits?api_key=${key}`);\n  return response.data;\n};\n\nexport const fetchReviews = async id => {\n  const response = await axios.get(`movie/${id}/reviews?api_key=${key}`);\n  return response.data;\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 20px;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 20px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column-reverse;\n  border: solid 1px;\n  border-color: #947150;\n  align-items: center;\n  justify-content: flex-end;\n  padding: 10px;\n  width: 130px;\n`;\n","import { Loader } from 'components/Loader/Loader';\nimport { List, Item } from './Cast.styled';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCredits } from 'api/api';\nimport ErrorMessage from 'components/ErrorMessage/ErrorMessage';\n\nexport default function Cast() {\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [cast, setCast] = useState([]);\n\n  const params = useParams();\n\n  useEffect(() => {\n    if (!params.movieId) {\n      return;\n    }\n\n    fetchCredits(params.movieId)\n      .then(data => {\n        setCast(data.cast);\n      })\n      .catch(() => {\n        setError(true);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [params.movieId]);\n\n  return (\n    <>\n      <h3>Cast:</h3>\n      {loading && <Loader />}\n      {error && (\n        <ErrorMessage title=\"Whoops! Error! Please reload this page!\" />\n      )}\n      {cast.length !== 0 ? (\n        <List>\n          {cast.map(({ id, name, character, profile_path }) => (\n            <Item key={id}>\n              <b>{name}</b>\n              <p>Character: {character}</p>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w185${profile_path}`\n                    : 'https://placehold.it/100x150&text=no_image'\n                }\n                alt={name}\n                width=\"100\"\n                height=\"150\"\n              />\n            </Item>\n          ))}\n        </List>\n      ) : (\n        <p>Sorry! We don't have any information about cast</p>\n      )}\n    </>\n  );\n}\n","export default function ErrorMessage({ title }) {\n  return <p>{title}</p>;\n}\n","import { Radio } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <Radio\n      visible={true}\n      height=\"80\"\n      width=\"80\"\n      ariaLabel=\"radio-loading\"\n      wrapperStyle={{}}\n      wrapperClass=\"radio-wrapper\"\n    />\n  );\n};\n"],"names":["axios","key","fetchAll","response","data","fetchWord","query","fetchId","id","fetchCredits","fetchReviews","List","styled","Item","Cast","useState","error","setError","loading","setLoading","cast","setCast","params","useParams","useEffect","movieId","then","catch","finally","Loader","ErrorMessage","title","length","map","name","character","profile_path","src","alt","width","height","visible","ariaLabel","wrapperStyle","wrapperClass"],"sourceRoot":""}